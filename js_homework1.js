
// console.log('number' + 3 + 3)
console.log('number' + 3 + 3)  
// Результат: number33
// Шаг 1: Первый оператор + (конкатенация строки с числом).
// Левый операнд 'number' строка превращает число 3 в строку
// Шаг 2: Второй оператор + (конкатенация ятроки с числом)
// Левый операнд строка 'number3' превращает число 3 в строку.
// console.log(null + 3) 3

console.log(5 && "qwerty") 
// Результат: qwerty
// Шаг1: Логическое И преобразует каждый операнд в логическое значение.
// 5 это true
// "qwerty" это не пустая строка,значит true
// Шаг2: В логисеком И, если все операторы истинны возвращается последний истинный.
// Значит это "qwerty"

console.log(+'40' + +'2' + "hillel") 
// Результат: 42hillel
// Шаг1: Унарный оператор + используется для преобразования строки в число.
// +40 преобразуется в число 40
// +2 преобразуется в число 2
// т.е. (40 + 2 + "hillel")
// Шаг2: Оператор сложения + сложит числа 40 и 2 = 4
// т.е. (42 + "hillel")
// Шаг3: Оператор + используется для конкатенации числа и строки.
// По правилу если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
// "hillel" строка следовательно 42 будет преобразовано тоже строку.
// И получим результат 42hillel

console.log('10' - 5 === 6) 
// Результат: false
// Шаг1: Арифметические операторы, за исключением бинарного плюса
// работают только с числами и всегда преобразуют операнды в числа.
// Таким образом оператор вычитания преобразует строку 10 в число.
// Шаг2: Происходит вычитание 10-5 = 5
// Шаг3: Оператор строгого равенства === проверяет равны ли оба операнда по значению и типу.
// В данном случае 5 и 6 - числа, но они не равны по значению. 
// Таким образом результат возвращает false.

console.log(true + false) 
// Результат: 1
// Шаг1: Оператор + преобразует булевые значения true и false в числа.
// true преобразуется в 1.
// false преобразуется в 0.
// Шаг2: Вычисление суммы 1 + 0 = 1

console.log('4px' - 3) 
// Результат: NaN
// Шаг1: Оператор - пытается преобразовать операнды в числа для выполнения арифметической операции.
// Строка '4px' не может быть преобразована в число, так как содержит не только цифры, но и символы px.
// Результат преобразования возвращает NaN.
// Шаг2: NaN - 3 
// Любая арифметическая операция с участием NaN также дает NaN.

console.log('4' - 3) 
// Результат: 1
// Шаг1: Оператор вычитания преобразует левый строковый операнд в число 4
// Шаг2: Происходит арифметическая операция вычитания 4-3 возвращает 1

console.log('6' + 3 ** 0) 
// Результат: 61
// Шаг1: Оператор умножения выполняется первым по приоритету операторов
// Любое число, возведенное в нулевую степень, равно 1.
// Шаг2: '6' + 1
// Оператор + при наличии строки выполняет конкатенацию строк. 
// Число 1 будет преобразовано в строку '1'.
// Возвращается результат 61.

console.log(12 / '6') 
// Результат: 2
// Шаг1: Оператор деления преобразует строковый операнд 6 в число для выполнения деления.
// Шаг2: 12/6 Выполнение деления. Возвращает результат 2.

console.log('10' + (5 === 6)) 
// Результат: 10false
// Шаг1: Сначала выполняется оператор строкого равенства 5 === 6 т.к. он находится в скобках.
// Оператор проверяет равны ли 5 и 6 по значению и типу. Результат в данном случае будет false.
// Шаг2: '10' + false вернет 10false
// Оператор + при наличии строки выполняет конкатенацию (объединение) строк.
// Логическое значение false при этом будет преобразовано в строку 'false'.

console.log(null == '') 
// Результат: false
// Шаг1: При сравнении значений разных типов JavaScript приводит каждое из них к числу. 
// Все операторы сравнения возвращают значение логического типа true или false.
// Следовательно оператор нестрогого равенства приводит обе части к числу.
// null преобразуется в 0
// Пустая строка '' преобразуется в 0
// Согласно спецификации языка, null и undefined при проверке равенства == равны только друг другу и не равны никаким другим значением.
// Следовательно здесь null рассматривается особо и не равен пустой строке,таким образом возвращает значение логического типа false.

console.log(3 ** (9 / 3)) 
// Результат: 27
// Шаг1: Первым по приоритету выполняется выражение деления в скобках 9/3 = 3
// Шаг2: Выполняется оператор возведения в степень 3**3. Возврашает 27


console.log(!!'false' == !!'true') 
// Результат: true
// Шаг1: Оператор НЕ сначала приводит аргумент к логическому типу true/false.
// 'false' не пустая строка значит рассматривается как true
// Первый оператор ! превращает true в false, а второй ! снова инвертирует false в true.
// Значит в первой части будет true.
// Шаг2: !!'true'
// Строка 'true' приводится к логическому типу true
// ! возвращает противоположное значение false.
// второй ! инвертирует false в true.
// Шаг3: true == true
// При нестрогом сравнении JS приводит типы данных к числу и выдает результат логического типа
// 1 == 1, таким образом возвращается true. 

console.log(0 || '0' && 1) 
// Результат: 1
// Шаг1: Приоритет оператора И && больше, чем ИЛИ ||, так что он выполняется раньше.
// '0' && 1 логическое И преобразует каждый операнд в логическое значение.Если результат false, останавливается и 
// возвращает исходное значение этого операнда.
// Непустая строка '0' - true; 1 - true. Оба операнда true, значит логическое И возвращает последнее истинное
// т.е. 1.
// Шаг2: 0 || 1.
// Логическое ИЛИ конвертирует каждый операнд в логическое значение. Если результат true, останавливается и 
// возвращает исходное значение этого операнда.
// 0 преобразуется в false
// 1 преобразуется в true. 
// Следовательно || вернет первое истинное значение 1.

console.log((+null == false) < 1) 
// Результат: false
// Шаг1: Унарный плюс + к null преобразует его в число 0. 
// Шаг2: Оператор нестрогого равенства приводит правый операнд false к числу.
// 0 == 0 дает true
// Шаг3: true < 1.
// Оператор сравнения приводит булевое значение true к числу 1 
// 1 < 1 возвращает false.

console.log(false && true || true) 
// Результат: true
// Шаг1: Логическое И имеет более высокий приоритет, поэтому оно выполняется первым.
// Оператор && возвращает первое ложное значение или последнее истинное значение.
// на первом шаге будет false.
// Шаг2: false || true
// Оператор || возвращает первое истинное значение или последнее ложное значение.
// Таким образом вернется первое истинное значение true.

console.log(false && (false || true)) 
// Результат: false
// Шаг1: Первым выполняется выражение, которое находится в скобках, т.е. оператор ||.
// Оператор || возвращает первое истинное значение или последнее ложное значение.
// Таким образом вернется первое истинное значение true.
// Шаг2: false && true
// Оператор && возвращает первое ложное значение или последнее истинное значение.
// Таким образом вернется первое ложное значение false.

console.log((+null == false) < 1 ** 5) 
// Результат: false
// Шаг1: Первым выполняется выражение в скобках. Унарный плюс + к null преобразует его в число 0.
// Шаг2: (0 == false) < 1 ** 5
// Оператор нестрогого равенства приводит правый операнд false к числу.
// 0 == 0 дает true.
// Шаг3: true < 1 ** 5
// Операция возведения в степень имеет более высокий приоритет, поэтому сначала выполняется 
// 1 ** 5 возвращает 1.
// Шаг4: true < 1
// Оператор сравнения приводит булевое значение true к числу 1 
// 1 < 1 возвращает false.